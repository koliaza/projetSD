### Starting build.
# Target: main/mjc.ml.depends, tags: { extension:ml, file:main/mjc.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
/usr/bin/ocamldep.opt -modules main/mjc.ml > main/mjc.ml.depends
# Target: main/cli_options.ml.depends, tags: { extension:ml, file:main/cli_options.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
/usr/bin/ocamldep.opt -modules main/cli_options.ml > main/cli_options.ml.depends
# Target: global/errors.ml.depends, tags: { extension:ml, file:global/errors.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
/usr/bin/ocamldep.opt -modules global/errors.ml > global/errors.ml.depends
# Target: global/location.ml.depends, tags: { extension:ml, file:global/location.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
/usr/bin/ocamldep.opt -modules global/location.ml > global/location.ml.depends
# Target: global/location.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:global/location.cmo, file:global/location.ml, implem, ocaml, quiet, traverse, use_menhir }
/usr/bin/ocamlc.opt -c -I global -I analysis -I netlist -I main -I parser -o global/location.cmo global/location.ml
# Target: main/mj_compiler.ml.depends, tags: { extension:ml, file:main/mj_compiler.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
/usr/bin/ocamldep.opt -modules main/mj_compiler.ml > main/mj_compiler.ml.depends
# Target: analysis/callgraph.ml.depends, tags: { extension:ml, file:analysis/callgraph.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
/usr/bin/ocamldep.opt -modules analysis/callgraph.ml > analysis/callgraph.ml.depends
# Target: global/ast.ml.depends, tags: { extension:ml, file:global/ast.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
/usr/bin/ocamldep.opt -modules global/ast.ml > global/ast.ml.depends
# Target: global/ident.ml.depends, tags: { extension:ml, file:global/ident.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
/usr/bin/ocamldep.opt -modules global/ident.ml > global/ident.ml.depends
# Target: global/static.ml.depends, tags: { extension:ml, file:global/static.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
/usr/bin/ocamldep.opt -modules global/static.ml > global/static.ml.depends
# Target: global/errors.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:global/errors.cmo, file:global/errors.ml, implem, ocaml, quiet, traverse, use_menhir }
/usr/bin/ocamlc.opt -c -I global -I analysis -I netlist -I main -I parser -o global/errors.cmo global/errors.ml
# Target: global/ident.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:global/ident.cmo, file:global/ident.ml, implem, ocaml, quiet, traverse, use_menhir }
/usr/bin/ocamlc.opt -c -I global -I analysis -I netlist -I main -I parser -o global/ident.cmo global/ident.ml
# Target: global/static.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:global/static.cmo, file:global/static.ml, implem, ocaml, quiet, traverse, use_menhir }
/usr/bin/ocamlc.opt -c -I global -I analysis -I netlist -I main -I parser -o global/static.cmo global/static.ml
# Target: main/cli_options.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:main/cli_options.cmo, file:main/cli_options.ml, implem, ocaml, quiet, traverse, use_menhir }
/usr/bin/ocamlc.opt -c -I main -I analysis -I netlist -I global -I parser -o main/cli_options.cmo main/cli_options.ml
# Target: global/mapfold.ml.depends, tags: { extension:ml, file:global/mapfold.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
/usr/bin/ocamldep.opt -modules global/mapfold.ml > global/mapfold.ml.depends
# Target: global/ast.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:global/ast.cmo, file:global/ast.ml, implem, ocaml, quiet, traverse, use_menhir }
/usr/bin/ocamlc.opt -c -I global -I analysis -I netlist -I main -I parser -o global/ast.cmo global/ast.ml
# Target: global/misc.ml.depends, tags: { extension:ml, file:global/misc.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
/usr/bin/ocamldep.opt -modules global/misc.ml > global/misc.ml.depends
# Target: global/misc.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:global/misc.cmo, file:global/misc.ml, implem, ocaml, quiet, traverse, use_menhir }
/usr/bin/ocamlc.opt -c -I global -I analysis -I netlist -I main -I parser -o global/misc.cmo global/misc.ml
# Target: analysis/normalize.ml.depends, tags: { extension:ml, file:analysis/normalize.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
/usr/bin/ocamldep.opt -modules analysis/normalize.ml > analysis/normalize.ml.depends
# Target: global/mapfold.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:global/mapfold.cmo, file:global/mapfold.ml, implem, ocaml, quiet, traverse, use_menhir }
/usr/bin/ocamlc.opt -c -I global -I analysis -I netlist -I main -I parser -o global/mapfold.cmo global/mapfold.ml
# Target: global/printer.ml.depends, tags: { extension:ml, file:global/printer.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
/usr/bin/ocamldep.opt -modules global/printer.ml > global/printer.ml.depends
# Target: analysis/normalize.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:analysis/normalize.cmo, file:analysis/normalize.ml, implem, ocaml, quiet, traverse, use_menhir }
/usr/bin/ocamlc.opt -c -I analysis -I netlist -I main -I global -I parser -o analysis/normalize.cmo analysis/normalize.ml
+ /usr/bin/ocamlc.opt -c -I analysis -I netlist -I main -I global -I parser -o analysis/normalize.cmo analysis/normalize.ml
File "analysis/normalize.ml", line 22, characters 12-36:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
(_, ([], _))
# Target: global/printer.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:global/printer.cmo, file:global/printer.ml, implem, ocaml, quiet, traverse, use_menhir }
/usr/bin/ocamlc.opt -c -I global -I analysis -I netlist -I main -I parser -o global/printer.cmo global/printer.ml
# Target: parser/lexer.mll, tags: { extension:mll, file:parser/lexer.mll, lexer, ocaml, ocamllex, quiet, traverse, use_menhir }
/usr/bin/ocamllex.opt -q parser/lexer.mll
# Target: parser/lexer.ml.depends, tags: { extension:ml, file:parser/lexer.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
/usr/bin/ocamldep.opt -modules parser/lexer.ml > parser/lexer.ml.depends
# Target: parser/parser.mly.depends, tags: { extension:mly, file:parser/parser.mly, menhir_ocamldep, ocaml, ocamldep, quiet, traverse, use_menhir }
/usr/bin/menhir --raw-depend --ocamldep '/usr/bin/ocamldep.opt -modules' parser/parser.mly > parser/parser.mly.depends
# Target: parser/parser.mly, tags: { extension:mly, file:parser/parser.mly, menhir, ocaml, parser, quiet, traverse, use_menhir }
/usr/bin/menhir --ocamlc '/usr/bin/ocamlc.opt -I parser -I analysis -I netlist -I main -I global' --infer parser/parser.mly
# Target: parser/parser.mli.depends, tags: { extension:mli, file:parser/parser.mli, ocaml, ocamldep, quiet, traverse, use_menhir }
/usr/bin/ocamldep.opt -modules parser/parser.mli > parser/parser.mli.depends
# Target: parser/parser.cmi, tags: { byte, compile, extension:mli, file:parser/parser.mli, interf, ocaml, quiet, traverse, use_menhir }
/usr/bin/ocamlc.opt -c -I parser -I analysis -I netlist -I main -I global -o parser/parser.cmi parser/parser.mli
# Target: main/mj2net.ml.depends, tags: { extension:ml, file:main/mj2net.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
/usr/bin/ocamldep.opt -modules main/mj2net.ml > main/mj2net.ml.depends
# Target: netlist/netlist_ast.ml.depends, tags: { extension:ml, file:netlist/netlist_ast.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
/usr/bin/ocamldep.opt -modules netlist/netlist_ast.ml > netlist/netlist_ast.ml.depends
# Target: netlist/netlist_ast.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:netlist/netlist_ast.cmo, file:netlist/netlist_ast.ml, implem, ocaml, quiet, traverse, use_menhir }
/usr/bin/ocamlc.opt -c -I netlist -I analysis -I main -I global -I parser -o netlist/netlist_ast.cmo netlist/netlist_ast.ml
# Target: netlist/netlist_printer.ml.depends, tags: { extension:ml, file:netlist/netlist_printer.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
/usr/bin/ocamldep.opt -modules netlist/netlist_printer.ml > netlist/netlist_printer.ml.depends
# Target: analysis/scoping.ml.depends, tags: { extension:ml, file:analysis/scoping.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
/usr/bin/ocamldep.opt -modules analysis/scoping.ml > analysis/scoping.ml.depends
# Target: analysis/simplify.ml.depends, tags: { extension:ml, file:analysis/simplify.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
/usr/bin/ocamldep.opt -modules analysis/simplify.ml > analysis/simplify.ml.depends
# Target: analysis/typing.ml.depends, tags: { extension:ml, file:analysis/typing.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
/usr/bin/ocamldep.opt -modules analysis/typing.ml > analysis/typing.ml.depends
# Target: analysis/callgraph.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:analysis/callgraph.cmo, file:analysis/callgraph.ml, implem, ocaml, quiet, traverse, use_menhir }
/usr/bin/ocamlc.opt -c -I analysis -I netlist -I main -I global -I parser -o analysis/callgraph.cmo analysis/callgraph.ml
# Target: parser/lexer.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:parser/lexer.cmo, file:parser/lexer.ml, implem, ocaml, quiet, traverse, use_menhir }
/usr/bin/ocamlc.opt -c -I parser -I analysis -I netlist -I main -I global -o parser/lexer.cmo parser/lexer.ml
# Target: main/mj2net.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:main/mj2net.cmo, file:main/mj2net.ml, implem, ocaml, quiet, traverse, use_menhir }
/usr/bin/ocamlc.opt -c -I main -I analysis -I netlist -I global -I parser -o main/mj2net.cmo main/mj2net.ml
# Target: netlist/netlist_printer.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:netlist/netlist_printer.cmo, file:netlist/netlist_printer.ml, implem, ocaml, quiet, traverse, use_menhir }
/usr/bin/ocamlc.opt -c -I netlist -I analysis -I main -I global -I parser -o netlist/netlist_printer.cmo netlist/netlist_printer.ml
# Target: analysis/scoping.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:analysis/scoping.cmo, file:analysis/scoping.ml, implem, ocaml, quiet, traverse, use_menhir }
/usr/bin/ocamlc.opt -c -I analysis -I netlist -I main -I global -I parser -o analysis/scoping.cmo analysis/scoping.ml
# Target: analysis/simplify.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:analysis/simplify.cmo, file:analysis/simplify.ml, implem, ocaml, quiet, traverse, use_menhir }
/usr/bin/ocamlc.opt -c -I analysis -I netlist -I main -I global -I parser -o analysis/simplify.cmo analysis/simplify.ml
# Target: analysis/typing.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:analysis/typing.cmo, file:analysis/typing.ml, implem, ocaml, quiet, traverse, use_menhir }
/usr/bin/ocamlc.opt -c -I analysis -I netlist -I main -I global -I parser -o analysis/typing.cmo analysis/typing.ml
# Target: main/mj_compiler.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:main/mj_compiler.cmo, file:main/mj_compiler.ml, implem, ocaml, quiet, traverse, use_menhir }
/usr/bin/ocamlc.opt -c -I main -I analysis -I netlist -I global -I parser -o main/mj_compiler.cmo main/mj_compiler.ml
# Target: main/mjc.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:main/mjc.cmo, file:main/mjc.ml, implem, ocaml, quiet, traverse, use_menhir }
/usr/bin/ocamlc.opt -c -I main -I analysis -I netlist -I global -I parser -o main/mjc.cmo main/mjc.ml
# Target: parser/parser.ml.depends, tags: { extension:ml, file:parser/parser.ml, ocaml, ocamldep, quiet, traverse, use_menhir, use_menhirLib }
/usr/bin/ocamldep.opt -modules parser/parser.ml > parser/parser.ml.depends
# Target: parser/parser.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:parser/parser.cmo, file:parser/parser.ml, implem, ocaml, quiet, traverse, use_menhir, use_menhirLib }
/usr/bin/ocamlc.opt -c -I parser -I analysis -I netlist -I main -I global -o parser/parser.cmo parser/parser.ml
# Target: main/mjc.byte, tags: { byte, dont_link_with, extension:byte, file:main/mjc.byte, link, ocaml, pkg_menhirLib, program, quiet, traverse, use_menhir, use_str, use_unix }
/usr/bin/ocamlc.opt unix.cma str.cma global/location.cmo global/errors.cmo main/cli_options.cmo global/ident.cmo global/static.cmo global/ast.cmo global/misc.cmo global/mapfold.cmo analysis/normalize.cmo global/printer.cmo analysis/callgraph.cmo analysis/scoping.cmo analysis/simplify.cmo analysis/typing.cmo netlist/netlist_ast.cmo main/mj2net.cmo netlist/netlist_printer.cmo parser/parser.cmo parser/lexer.cmo main/mj_compiler.cmo main/mjc.cmo -o main/mjc.byte
# Compilation successful.
