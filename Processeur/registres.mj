(*bloc pour la gestion des registres.*)

(*mux et démux, utiles éventuellements pour d'autres choses aussi*)

nmux<n>(c,a:[n],b:[n]) = (o:[n]) where
	if n = 0 
	then o = [] ;
	else
		o = mux(c,a[0],b[0]) . nmux<n-1>(c,a[1..],b[1..]) ;
	end if
end where

mux8 (c,a:[8],b:[8]) = (o:[8]) where 
	o = nmux<8>(c,a,b)
end where
	
	
demux<n>(adress:[n],input) = (o:[2^n]) where
	if n = 0 
	then
		o = input ;
	else 
		i2 = input & adress[n-1] ;
		i1 = input & (not (adress[n-1])) ;
		o = demux<n-1>(adress[..n-2],i1) . demux<n-1>(adress[..n-2],i2) ;
	end if 
end where

multi_mux<m,n>(adress:[n],input:[m*2^n]) = (o:[m]) where
	if n = 0 
	then 
		o = input ;
	else 
		i2 = multi_mux<m,n-1>(adress[..n-2],input[..(m*(2^(n-1)))-1]) ;
		i1 = multi_mux<m,n-1>(adress[..n-2],input[m*2^(n-1)..]) ;
		o = nmux<m>(adress[n-1],i1,i2) ;
	end if
end where
	
(*registres*)	
mem_reg(write_enable,in) = o where 
	input = mux(write_enable,in,o) ;
	o = reg(input) ;
end where
	
reg8 (write_enable,in:[8]) = (out:[8]) where 
	out = mem_reg(write_enable,in[0]).mem_reg(write_enable,in[1]).mem_reg(write_enable,in[2]).mem_reg(write_enable,in[3]).
		mem_reg(write_enable,in[4]).mem_reg(write_enable,in[5]).mem_reg(write_enable,in[6]).mem_reg(write_enable,in[7]) ;
end where


bloc_registre(write_enable,adress_1:[3],adress_2:[3],in:[8]) = (out:[16]) where 
(*remarque : on a deux registres en sortie pour les opérations, donc out sur 16 bits*)
	w_e = demux<3>(adress_1,write_enable) ;
reg_0 = reg8(w_e[0],in) ; 
reg_1 = reg8(w_e[1],in) ; 
reg_2 = reg8(w_e[2],in) ; 
reg_3 = reg8(w_e[3],in) ; 
reg_4 = reg8(w_e[4],in) ; 
reg_5 = reg8(w_e[5],in) ; 
reg_6 = reg8(w_e[6],in) ; 
reg_7 = reg8(w_e[7],in) ; 
all_reg = reg_0 . reg_1 . reg_2 . reg_3 . reg_4 . reg_5 . reg_6 . reg_7   ;
out = multi_mux<8,3>(adress_1,all_reg) . multi_mux<8,3>(adress_2,all_reg)
end where






