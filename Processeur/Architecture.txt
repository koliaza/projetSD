Description de l'architecture du processeur.

Nicolas Blanchard - Axel Davy - Marc Heinrich 



------ Spécifications

Instructions 16 bits
Codés par:
8 bits pour l'instruction - 8 bits pour les arguments
 
les arguments peuvent être de la forme :
  .reg reg (4 bits pour chaque registre)
  .reg vide (4 bits pour le registre et 4 pour vide)
  .entier 8 bits poids faibles en 0




------ Registres

AX, BX, CX, DX et EX sont des registres 8 bits qui permettent toutes les opérations. AX sera particulièrement utilisé pour charger des entiers de la mémoire ou de constantes.
PC est un registre 8 bits qui pointe l'instruction à exécuter au prochain tour
RA est un registre 8 bits utilisé par jump and link (jal)
SP sert à gérer la pile (registres 8 bits)
FLAGS est un registre de quelques bits qui servira en interne à la gestion des sauts.
AX : 000(_)
BX : 001(_)
CX : 010(_)
DX : 011(_)
EX : 100(_)
SP : 101(_)
RA : 111(_)



------ Liste de l'ensemble des instructions

ADD reg1,reg2 
  Addition non signée reg1 <- reg1 + reg2
  
ADDS reg1,reg2
  Addition signée reg1 <- reg1 + reg2
  
AND reg1,reg2 
  ET logique reg1 <- reg1 & reg2

DIV reg1,reg2
  Division non signée: reg1 <- reg1 / reg2
  Si reg2 = 0 alors renvoie 11111111
  
DIVS reg1,reg2
  Division signée: reg1 <- reg1 / reg2
  Si reg2 = 0 alors renvoie 11111111

JAL addr8 
  saut à addr8 et sauvegarde de PC dans RA
  
JE addr8 (equal)
  Saut à addr8 si FLAG.(0) est à 1, passe à la suite sinon.
  
JL addr8 (less)
  Saut à addr8 si FLAG.(1) est à 0, passe à la suite sinon.
  
JLE addr8 (less or equal)
  Saut à addr8 si FLAG.(0) est à 1 ou FLAG.(1) est à 0, passe à la suite sinon.
  
JM addr8 (more)
  Saut à addr8 si FLAG.(1) est à 1 et FLAG.(0) à 0, passe à la suite sinon.
  
JME addr8 (more or equal)
  Saut à addr8 si FLAG.(1) est à 1, passe à la suite sinon.
  
JMP addr8
  Saut à addr8

JNE addr8 (not equal)
  Saut à addr8 si FLAG.(0) est à 0, passe à la suite sinon.
  
(LA constante8)
   Sert à charger l'adresse d'une constante dans AX. Surcouche assembleur: fera en fait appel à LI.

LI int8
  Charge un entier 8 bits dans le registre AX

LW reg1,reg2
  Charge un entier 8 bits contenu dans la RAM à l'adresse reg2 dans reg1.

MOVE reg1,reg2
  reg1 <- reg2
  
MUL reg1,reg2
  Multiplication non signée: reg1 <- reg1 * reg2
  
MULS reg1,reg2
  Multiplication signée: reg1 <- reg1 * reg2
  
NOT reg1
  opération non bit à bit: reg1 <- non reg1
  
OR reg1,reg2 
  OU logique reg1 <- reg1 or reg2
   
SUB reg,reg 
  soustraction non signée reg1 <- reg1 - reg2

SUBS reg,reg
  soustraction signée reg1 <- reg1 - reg2
     
SHL reg1,reg2
  décale reg1 de reg2 bits vers la gauche
  
SHR reg1,reg2
  décale reg1 de reg2 bits vers la droite
  
SLA reg1, reg2
  décale reg1 de reg2 bits vers la gauche en ajoutant des bits égaux au bit de signe

SW reg1,reg2
  Ecrit le contenu de reg2 à l'adresse reg1 de la RAM

TEST reg1,reg2
  Fait un comparaison de reg1 et de reg2:
  FLAGS.(0) est assigné à 1 s'il y a égalité, 0 sinon.
  FLAGS.(1) est assigné à 1 si reg1 >= reg2, 0 sinon


*les nombres indiqués sont les 8 bits de config de l'alu*
------ Instructions par type

ARITHMETIQUE 8 opérations

ADD reg1,reg2 10000000
  Addition non signée reg1 <- reg1 + reg2
  
ADDS reg1,reg2 10000000 (*addition signée et non signée identique d'un point de vue circuit logique*)
  Addition signée reg1 <- reg1 + reg2

MOVE reg1,reg2 10110000
  reg1 <- reg2
  
MUL reg1,reg2 10100000
  Multiplication non signée: reg1 <- reg1 * reg2
  
MULS reg1,reg2 10010000
  Multiplication signée: reg1 <- reg1 * reg2

SUB reg,reg 
  soustraction non signée reg1 <- reg1 - reg2

SUBS reg,reg 10000001
  soustraction signée reg1 <- reg1 - reg2

LOGIQUE 6 opérations

AND reg1,reg2 11000000
  ET logique reg1 <- reg1 & reg2

NOT reg1 11110000
  opération non bit à bit: reg1 <- non reg1
  
OR reg1,reg2 11100000
  OU logique reg1 <- reg1 or reg2
   
SHL reg1,reg2 11001000
  décale reg1 de reg2 bits vers la gauche et le met dans reg1
  
SHR reg1,reg2 11101000
  décale reg1 de reg2 bits vers la droite

SRA reg1, reg2 11011000
  décale reg1 de reg2 bits vers la droite en ajoutant des bits égaux au bit de signe

XOR reg1,reg2 11010000
  XOR logique reg1 <- re1 xor reg2

BRANCHEMENTS 8 opérations
  
JAL addr8  00011100
  saut à addr8 et sauvegarde de PC dans RA
  
JE addr8 (equal) 00011000
  Saut à addr8 si FLAG.(0) est à 1, passe à la suite sinon.
  
JL addr8 (less)  00010100
  Saut à addr8 si FLAG.(1) est à 0, passe à la suite sinon.
  
JLE addr8 (less or equal)   00010000
  Saut à addr8 si FLAG.(0) est à 1 ou FLAG.(1) est à 0, passe à la suite sinon.
  
JM addr8 (more)   00001100
  Saut à addr8 si FLAG.(1) est à 1 et FLAG.(0) à 0, passe à la suite sinon.
  
JME addr8 (more or equal) 00001000
  Saut à addr8 si FLAG.(1) est à 1, passe à la suite sinon.
  
JMP addr8 00000100
  Saut à addr8

JNE addr8 (not equal) 00000000
  Saut à addr8 si FLAG.(0) est à 0, passe à la suite sinon.

JR reg1 00111100
  Saut à l'adresse contenue dans reg1
     
TEST reg1,reg2 00100000
  Fait un comparaison de reg1 et de reg2: (non signée)
  FLAGS.(0) est assigné à 1 s'il y a égalité, 0 sinon.
  FLAGS.(1) est assigné à 1 si reg1 >= reg2, 0 sinon

TESTS reg1,reg2 00100100
  Fait un comparaison de reg1 et de reg2: (signée)
  FLAGS.(0) est assigné à 1 s'il y a égalité, 0 sinon.
  FLAGS.(1) est assigné à 1 si reg1 >= reg2, 0 sinon

INTERFACE MEMOIRE 4 opérations

LI int8 01110000
  Charge un entier 8 bits dans le registre AX

LW reg1,reg2 01100000
  Charge un entier 8 bits contenu dans la RAM à l'adresse reg2 dans reg1.

SW reg1,reg2 01010000
Ecrit le contenu de reg2 à l'adresse reg1 de la RAM
(ordre inversé par l'assembleur SW reg2,reg1)





Implémentation :
1er bit : arith ou non
2e bit : logique | memoire
3e bit : signee | 
4e bit / 5e bit / 6e bit/ 7e: table
7e bit 8e ?

